/*
Copyright 2022 The efucloud.com Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/efucloud/api/rbac/v1alpha1/generated.proto

package v1alpha1

import (
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *KubeUser) Reset()      { *m = KubeUser{} }
func (*KubeUser) ProtoMessage() {}
func (*KubeUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{0}
}
func (m *KubeUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeUser.Merge(m, src)
}
func (m *KubeUser) XXX_Size() int {
	return m.Size()
}
func (m *KubeUser) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeUser.DiscardUnknown(m)
}

var xxx_messageInfo_KubeUser proto.InternalMessageInfo

func (m *KubeUserList) Reset()      { *m = KubeUserList{} }
func (*KubeUserList) ProtoMessage() {}
func (*KubeUserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{1}
}
func (m *KubeUserList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeUserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeUserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeUserList.Merge(m, src)
}
func (m *KubeUserList) XXX_Size() int {
	return m.Size()
}
func (m *KubeUserList) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeUserList.DiscardUnknown(m)
}

var xxx_messageInfo_KubeUserList proto.InternalMessageInfo

func (m *KubeUserSpec) Reset()      { *m = KubeUserSpec{} }
func (*KubeUserSpec) ProtoMessage() {}
func (*KubeUserSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{2}
}
func (m *KubeUserSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeUserSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeUserSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeUserSpec.Merge(m, src)
}
func (m *KubeUserSpec) XXX_Size() int {
	return m.Size()
}
func (m *KubeUserSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeUserSpec.DiscardUnknown(m)
}

var xxx_messageInfo_KubeUserSpec proto.InternalMessageInfo

func (m *KubeUserStatus) Reset()      { *m = KubeUserStatus{} }
func (*KubeUserStatus) ProtoMessage() {}
func (*KubeUserStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{3}
}
func (m *KubeUserStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeUserStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubeUserStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeUserStatus.Merge(m, src)
}
func (m *KubeUserStatus) XXX_Size() int {
	return m.Size()
}
func (m *KubeUserStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeUserStatus.DiscardUnknown(m)
}

var xxx_messageInfo_KubeUserStatus proto.InternalMessageInfo

func (m *UserClusterNamespace) Reset()      { *m = UserClusterNamespace{} }
func (*UserClusterNamespace) ProtoMessage() {}
func (*UserClusterNamespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{4}
}
func (m *UserClusterNamespace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserClusterNamespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UserClusterNamespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserClusterNamespace.Merge(m, src)
}
func (m *UserClusterNamespace) XXX_Size() int {
	return m.Size()
}
func (m *UserClusterNamespace) XXX_DiscardUnknown() {
	xxx_messageInfo_UserClusterNamespace.DiscardUnknown(m)
}

var xxx_messageInfo_UserClusterNamespace proto.InternalMessageInfo

func (m *UserClusterWorkspace) Reset()      { *m = UserClusterWorkspace{} }
func (*UserClusterWorkspace) ProtoMessage() {}
func (*UserClusterWorkspace) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{5}
}
func (m *UserClusterWorkspace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserClusterWorkspace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UserClusterWorkspace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserClusterWorkspace.Merge(m, src)
}
func (m *UserClusterWorkspace) XXX_Size() int {
	return m.Size()
}
func (m *UserClusterWorkspace) XXX_DiscardUnknown() {
	xxx_messageInfo_UserClusterWorkspace.DiscardUnknown(m)
}

var xxx_messageInfo_UserClusterWorkspace proto.InternalMessageInfo

func (m *UserKubeConfig) Reset()      { *m = UserKubeConfig{} }
func (*UserKubeConfig) ProtoMessage() {}
func (*UserKubeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{6}
}
func (m *UserKubeConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserKubeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UserKubeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserKubeConfig.Merge(m, src)
}
func (m *UserKubeConfig) XXX_Size() int {
	return m.Size()
}
func (m *UserKubeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_UserKubeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_UserKubeConfig proto.InternalMessageInfo

func (m *UserKubeConfigList) Reset()      { *m = UserKubeConfigList{} }
func (*UserKubeConfigList) ProtoMessage() {}
func (*UserKubeConfigList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{7}
}
func (m *UserKubeConfigList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserKubeConfigList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UserKubeConfigList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserKubeConfigList.Merge(m, src)
}
func (m *UserKubeConfigList) XXX_Size() int {
	return m.Size()
}
func (m *UserKubeConfigList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserKubeConfigList.DiscardUnknown(m)
}

var xxx_messageInfo_UserKubeConfigList proto.InternalMessageInfo

func (m *UserKubeConfigSpec) Reset()      { *m = UserKubeConfigSpec{} }
func (*UserKubeConfigSpec) ProtoMessage() {}
func (*UserKubeConfigSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{8}
}
func (m *UserKubeConfigSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserKubeConfigSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UserKubeConfigSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserKubeConfigSpec.Merge(m, src)
}
func (m *UserKubeConfigSpec) XXX_Size() int {
	return m.Size()
}
func (m *UserKubeConfigSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_UserKubeConfigSpec.DiscardUnknown(m)
}

var xxx_messageInfo_UserKubeConfigSpec proto.InternalMessageInfo

func (m *UserKubeConfigStatus) Reset()      { *m = UserKubeConfigStatus{} }
func (*UserKubeConfigStatus) ProtoMessage() {}
func (*UserKubeConfigStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{9}
}
func (m *UserKubeConfigStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserKubeConfigStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UserKubeConfigStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserKubeConfigStatus.Merge(m, src)
}
func (m *UserKubeConfigStatus) XXX_Size() int {
	return m.Size()
}
func (m *UserKubeConfigStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UserKubeConfigStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UserKubeConfigStatus proto.InternalMessageInfo

func (m *WorkspaceGroup) Reset()      { *m = WorkspaceGroup{} }
func (*WorkspaceGroup) ProtoMessage() {}
func (*WorkspaceGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{10}
}
func (m *WorkspaceGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkspaceGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WorkspaceGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkspaceGroup.Merge(m, src)
}
func (m *WorkspaceGroup) XXX_Size() int {
	return m.Size()
}
func (m *WorkspaceGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkspaceGroup.DiscardUnknown(m)
}

var xxx_messageInfo_WorkspaceGroup proto.InternalMessageInfo

func (m *WorkspaceGroupList) Reset()      { *m = WorkspaceGroupList{} }
func (*WorkspaceGroupList) ProtoMessage() {}
func (*WorkspaceGroupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{11}
}
func (m *WorkspaceGroupList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkspaceGroupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WorkspaceGroupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkspaceGroupList.Merge(m, src)
}
func (m *WorkspaceGroupList) XXX_Size() int {
	return m.Size()
}
func (m *WorkspaceGroupList) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkspaceGroupList.DiscardUnknown(m)
}

var xxx_messageInfo_WorkspaceGroupList proto.InternalMessageInfo

func (m *WorkspaceGroupSpec) Reset()      { *m = WorkspaceGroupSpec{} }
func (*WorkspaceGroupSpec) ProtoMessage() {}
func (*WorkspaceGroupSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{12}
}
func (m *WorkspaceGroupSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkspaceGroupSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WorkspaceGroupSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkspaceGroupSpec.Merge(m, src)
}
func (m *WorkspaceGroupSpec) XXX_Size() int {
	return m.Size()
}
func (m *WorkspaceGroupSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkspaceGroupSpec.DiscardUnknown(m)
}

var xxx_messageInfo_WorkspaceGroupSpec proto.InternalMessageInfo

func (m *WorkspaceGroupStatus) Reset()      { *m = WorkspaceGroupStatus{} }
func (*WorkspaceGroupStatus) ProtoMessage() {}
func (*WorkspaceGroupStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{13}
}
func (m *WorkspaceGroupStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkspaceGroupStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WorkspaceGroupStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkspaceGroupStatus.Merge(m, src)
}
func (m *WorkspaceGroupStatus) XXX_Size() int {
	return m.Size()
}
func (m *WorkspaceGroupStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkspaceGroupStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WorkspaceGroupStatus proto.InternalMessageInfo

func (m *WorkspaceRole) Reset()      { *m = WorkspaceRole{} }
func (*WorkspaceRole) ProtoMessage() {}
func (*WorkspaceRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{14}
}
func (m *WorkspaceRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkspaceRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WorkspaceRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkspaceRole.Merge(m, src)
}
func (m *WorkspaceRole) XXX_Size() int {
	return m.Size()
}
func (m *WorkspaceRole) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkspaceRole.DiscardUnknown(m)
}

var xxx_messageInfo_WorkspaceRole proto.InternalMessageInfo

func (m *WorkspaceRoleList) Reset()      { *m = WorkspaceRoleList{} }
func (*WorkspaceRoleList) ProtoMessage() {}
func (*WorkspaceRoleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{15}
}
func (m *WorkspaceRoleList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkspaceRoleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WorkspaceRoleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkspaceRoleList.Merge(m, src)
}
func (m *WorkspaceRoleList) XXX_Size() int {
	return m.Size()
}
func (m *WorkspaceRoleList) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkspaceRoleList.DiscardUnknown(m)
}

var xxx_messageInfo_WorkspaceRoleList proto.InternalMessageInfo

func (m *WorkspaceRoleSpec) Reset()      { *m = WorkspaceRoleSpec{} }
func (*WorkspaceRoleSpec) ProtoMessage() {}
func (*WorkspaceRoleSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{16}
}
func (m *WorkspaceRoleSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkspaceRoleSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WorkspaceRoleSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkspaceRoleSpec.Merge(m, src)
}
func (m *WorkspaceRoleSpec) XXX_Size() int {
	return m.Size()
}
func (m *WorkspaceRoleSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkspaceRoleSpec.DiscardUnknown(m)
}

var xxx_messageInfo_WorkspaceRoleSpec proto.InternalMessageInfo

func (m *WorkspaceRoleStatus) Reset()      { *m = WorkspaceRoleStatus{} }
func (*WorkspaceRoleStatus) ProtoMessage() {}
func (*WorkspaceRoleStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c42a1ded9dff3a30, []int{17}
}
func (m *WorkspaceRoleStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkspaceRoleStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WorkspaceRoleStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkspaceRoleStatus.Merge(m, src)
}
func (m *WorkspaceRoleStatus) XXX_Size() int {
	return m.Size()
}
func (m *WorkspaceRoleStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkspaceRoleStatus.DiscardUnknown(m)
}

var xxx_messageInfo_WorkspaceRoleStatus proto.InternalMessageInfo

func init() {
	proto.RegisterType((*KubeUser)(nil), "github.com.efucloud.api.rbac.v1alpha1.KubeUser")
	proto.RegisterType((*KubeUserList)(nil), "github.com.efucloud.api.rbac.v1alpha1.KubeUserList")
	proto.RegisterType((*KubeUserSpec)(nil), "github.com.efucloud.api.rbac.v1alpha1.KubeUserSpec")
	proto.RegisterType((*KubeUserStatus)(nil), "github.com.efucloud.api.rbac.v1alpha1.KubeUserStatus")
	proto.RegisterType((*UserClusterNamespace)(nil), "github.com.efucloud.api.rbac.v1alpha1.UserClusterNamespace")
	proto.RegisterType((*UserClusterWorkspace)(nil), "github.com.efucloud.api.rbac.v1alpha1.UserClusterWorkspace")
	proto.RegisterType((*UserKubeConfig)(nil), "github.com.efucloud.api.rbac.v1alpha1.UserKubeConfig")
	proto.RegisterType((*UserKubeConfigList)(nil), "github.com.efucloud.api.rbac.v1alpha1.UserKubeConfigList")
	proto.RegisterType((*UserKubeConfigSpec)(nil), "github.com.efucloud.api.rbac.v1alpha1.UserKubeConfigSpec")
	proto.RegisterType((*UserKubeConfigStatus)(nil), "github.com.efucloud.api.rbac.v1alpha1.UserKubeConfigStatus")
	proto.RegisterType((*WorkspaceGroup)(nil), "github.com.efucloud.api.rbac.v1alpha1.WorkspaceGroup")
	proto.RegisterType((*WorkspaceGroupList)(nil), "github.com.efucloud.api.rbac.v1alpha1.WorkspaceGroupList")
	proto.RegisterType((*WorkspaceGroupSpec)(nil), "github.com.efucloud.api.rbac.v1alpha1.WorkspaceGroupSpec")
	proto.RegisterType((*WorkspaceGroupStatus)(nil), "github.com.efucloud.api.rbac.v1alpha1.WorkspaceGroupStatus")
	proto.RegisterType((*WorkspaceRole)(nil), "github.com.efucloud.api.rbac.v1alpha1.WorkspaceRole")
	proto.RegisterType((*WorkspaceRoleList)(nil), "github.com.efucloud.api.rbac.v1alpha1.WorkspaceRoleList")
	proto.RegisterType((*WorkspaceRoleSpec)(nil), "github.com.efucloud.api.rbac.v1alpha1.WorkspaceRoleSpec")
	proto.RegisterType((*WorkspaceRoleStatus)(nil), "github.com.efucloud.api.rbac.v1alpha1.WorkspaceRoleStatus")
}

func init() {
	proto.RegisterFile("github.com/efucloud/api/rbac/v1alpha1/generated.proto", fileDescriptor_c42a1ded9dff3a30)
}

var fileDescriptor_c42a1ded9dff3a30 = []byte{
	// 1311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4d, 0x6f, 0x1b, 0xc5,
	0x1b, 0x8f, 0x5f, 0x92, 0xda, 0x13, 0x27, 0x6d, 0x26, 0x2f, 0xb2, 0x22, 0xfd, 0xed, 0x68, 0xff,
	0x14, 0x45, 0x08, 0x76, 0x49, 0x68, 0x20, 0x10, 0x21, 0x11, 0xbb, 0x11, 0xa0, 0x84, 0x82, 0x26,
	0x09, 0x11, 0x81, 0x4a, 0x8c, 0xd7, 0x63, 0x7b, 0xeb, 0xf5, 0xee, 0xb2, 0xb3, 0x9b, 0x12, 0x4e,
	0xdc, 0xb8, 0xf2, 0x19, 0xf8, 0x06, 0x88, 0x7e, 0x82, 0x72, 0xc9, 0x01, 0xa1, 0x1e, 0x7b, 0xb2,
	0x88, 0xe1, 0x23, 0x70, 0xe2, 0x84, 0x66, 0x3c, 0x3b, 0xfb, 0x62, 0x3b, 0x75, 0x2c, 0x14, 0xf5,
	0x56, 0x3f, 0xcf, 0xef, 0xf9, 0x3d, 0xcf, 0x3c, 0xaf, 0x9b, 0x82, 0xad, 0xa6, 0xe1, 0xb5, 0xfc,
	0x9a, 0xaa, 0xdb, 0x1d, 0x8d, 0x34, 0x7c, 0xdd, 0xb4, 0xfd, 0xba, 0x86, 0x1d, 0x43, 0x73, 0x6b,
	0x58, 0xd7, 0xce, 0x36, 0xb0, 0xe9, 0xb4, 0xf0, 0x86, 0xd6, 0x24, 0x16, 0x71, 0xb1, 0x47, 0xea,
	0xaa, 0xe3, 0xda, 0x9e, 0x0d, 0xef, 0x86, 0x66, 0x6a, 0x60, 0xa6, 0x62, 0xc7, 0x50, 0x99, 0x99,
	0x1a, 0x98, 0xad, 0xbe, 0x11, 0x61, 0x6f, 0xda, 0x4d, 0x5b, 0xe3, 0xd6, 0x35, 0xbf, 0xc1, 0x7f,
	0xf1, 0x1f, 0xfc, 0x5f, 0x7d, 0xd6, 0xd5, 0x7b, 0xed, 0x6d, 0xaa, 0x1a, 0x36, 0xf3, 0xdf, 0xc1,
	0x7a, 0xcb, 0xb0, 0x88, 0x7b, 0xae, 0x39, 0xed, 0x26, 0x13, 0x50, 0xad, 0x43, 0x3c, 0xac, 0x9d,
	0x0d, 0xc4, 0xb2, 0xfa, 0xf6, 0x28, 0x2b, 0xd7, 0xb7, 0x3c, 0xa3, 0x43, 0x34, 0xaa, 0xb7, 0x48,
	0x07, 0x27, 0xed, 0x94, 0x9f, 0xd2, 0x20, 0xb7, 0xef, 0xd7, 0xc8, 0x31, 0x25, 0x2e, 0xfc, 0x1a,
	0xe4, 0x18, 0x7f, 0x1d, 0x7b, 0xb8, 0x98, 0x5a, 0x4b, 0xad, 0xcf, 0x6e, 0xbe, 0xa9, 0xf6, 0x79,
	0xd5, 0x28, 0xaf, 0xea, 0xb4, 0x9b, 0x4c, 0x40, 0x55, 0x86, 0x56, 0xcf, 0x36, 0xd4, 0x4f, 0x6b,
	0x8f, 0x88, 0xee, 0x7d, 0x42, 0x3c, 0x5c, 0x81, 0x17, 0xdd, 0xf2, 0x54, 0xaf, 0x5b, 0x06, 0xa1,
	0x0c, 0x49, 0x56, 0x78, 0x0c, 0xb2, 0xd4, 0x21, 0x7a, 0x31, 0xcd, 0xd9, 0xdf, 0x52, 0xc7, 0xca,
	0xa0, 0x1a, 0x04, 0x78, 0xe8, 0x10, 0xbd, 0x52, 0x10, 0x0e, 0xb2, 0xec, 0x17, 0xe2, 0x74, 0xf0,
	0x21, 0x98, 0xa1, 0x1e, 0xf6, 0x7c, 0x5a, 0xcc, 0x70, 0xe2, 0xad, 0xeb, 0x12, 0x73, 0xe3, 0xca,
	0xbc, 0xa0, 0x9e, 0xe9, 0xff, 0x46, 0x82, 0x54, 0x79, 0x9a, 0x02, 0x85, 0x00, 0x7a, 0x60, 0x50,
	0x0f, 0x7e, 0x35, 0x90, 0x28, 0x75, 0xbc, 0x44, 0x31, 0x6b, 0x9e, 0xa6, 0x3b, 0xc2, 0x55, 0x2e,
	0x90, 0x44, 0x92, 0x74, 0x04, 0xa6, 0x0d, 0x8f, 0x74, 0x68, 0x31, 0xbd, 0x96, 0x59, 0x9f, 0xdd,
	0xd4, 0xae, 0xf9, 0x98, 0xca, 0x9c, 0xe0, 0x9e, 0xfe, 0x98, 0xb1, 0xa0, 0x3e, 0x99, 0xf2, 0x43,
	0x26, 0x7c, 0x04, 0x4b, 0x1d, 0x7c, 0x1d, 0xe4, 0x7c, 0x4a, 0x5c, 0x0b, 0x77, 0x08, 0x7f, 0x44,
	0x3e, 0x0c, 0xea, 0x58, 0xc8, 0x91, 0x44, 0xc0, 0xff, 0x83, 0x69, 0xd2, 0xc1, 0x86, 0xc9, 0x4b,
	0x97, 0x0f, 0x7d, 0xec, 0x31, 0x21, 0xea, 0xeb, 0x18, 0xa5, 0x89, 0xad, 0xa6, 0x8f, 0x9b, 0x84,
	0x57, 0x22, 0x42, 0x79, 0x20, 0xe4, 0x48, 0x22, 0x18, 0xa5, 0xd3, 0xb2, 0x2d, 0x52, 0xcc, 0xc6,
	0x29, 0x3f, 0x63, 0x42, 0xd4, 0xd7, 0x41, 0x05, 0xcc, 0x34, 0x5d, 0xdb, 0x77, 0x68, 0x71, 0x66,
	0x2d, 0xb3, 0x9e, 0xaf, 0x00, 0x56, 0x9f, 0x0f, 0xb9, 0x04, 0x09, 0x0d, 0x73, 0x6b, 0x19, 0x7a,
	0x9b, 0xbf, 0xe4, 0x56, 0xdc, 0xed, 0x03, 0x21, 0x47, 0x12, 0x01, 0x3f, 0x00, 0x77, 0x74, 0xd3,
	0xa7, 0x1e, 0x71, 0x77, 0xeb, 0x1d, 0xc3, 0x42, 0xa4, 0x41, 0x8b, 0x39, 0xce, 0xbd, 0xd4, 0xeb,
	0x96, 0xef, 0x54, 0x13, 0x3a, 0x34, 0x80, 0x86, 0xef, 0x83, 0xdb, 0x42, 0xf6, 0xb9, 0x41, 0x1e,
	0x73, 0x82, 0x3c, 0x27, 0x58, 0xec, 0x75, 0xcb, 0xb7, 0xab, 0x71, 0x15, 0x4a, 0x62, 0x95, 0xa7,
	0x69, 0x30, 0x1f, 0xef, 0x3c, 0xf8, 0xaa, 0x6c, 0xe0, 0x7e, 0x25, 0x46, 0x74, 0x22, 0xc3, 0xb9,
	0x04, 0x53, 0xdb, 0x12, 0x65, 0x90, 0x38, 0xc4, 0xa5, 0x48, 0x68, 0xa1, 0x0d, 0xc0, 0x63, 0xdb,
	0x6d, 0x53, 0x07, 0xeb, 0x84, 0x0d, 0x05, 0xeb, 0xa3, 0x9d, 0x31, 0xfb, 0x88, 0x85, 0x25, 0xde,
	0x70, 0x12, 0x70, 0x84, 0x63, 0x2d, 0x45, 0x14, 0x45, 0x5c, 0x30, 0x87, 0x2c, 0xb9, 0xc2, 0x61,
	0x76, 0x52, 0x87, 0x0f, 0x02, 0x8e, 0xd0, 0xa1, 0x14, 0x51, 0x14, 0x71, 0xa1, 0x3c, 0x49, 0x81,
	0xa5, 0x61, 0x86, 0x70, 0x13, 0x00, 0x91, 0x70, 0x44, 0x1a, 0x22, 0x9d, 0x92, 0xac, 0x2a, 0x35,
	0x28, 0x82, 0x82, 0x6a, 0x2c, 0xfa, 0x34, 0xaf, 0xe5, 0xfc, 0x68, 0xe7, 0x70, 0x1b, 0x14, 0xb0,
	0x69, 0x4a, 0x25, 0xef, 0xf5, 0x5c, 0x65, 0x49, 0x78, 0x29, 0xec, 0x46, 0x74, 0x28, 0x86, 0x54,
	0xbe, 0x8b, 0x45, 0x2d, 0x93, 0x39, 0x69, 0xd4, 0x91, 0x22, 0x47, 0xa2, 0x1e, 0x5e, 0x23, 0xe5,
	0x49, 0x1a, 0xcc, 0x33, 0xe7, 0xac, 0xf7, 0xaa, 0xb6, 0xd5, 0x30, 0x9a, 0x37, 0xb0, 0xf1, 0xbf,
	0x8c, 0x6d, 0xfc, 0x77, 0xaf, 0xd1, 0x12, 0x61, 0x98, 0x23, 0xf7, 0xbe, 0x9e, 0xd8, 0xfb, 0x3b,
	0x93, 0xd1, 0x5f, 0xbd, 0xfd, 0x7f, 0x4f, 0x01, 0x18, 0x37, 0xb8, 0x81, 0x1b, 0x70, 0x1a, 0xbf,
	0x01, 0x5b, 0x13, 0x3d, 0x6c, 0xc4, 0x25, 0xf8, 0x35, 0x93, 0x7c, 0x10, 0xbf, 0x07, 0x5b, 0x60,
	0xb6, 0x2d, 0xb6, 0x52, 0xd8, 0x83, 0x8b, 0x82, 0x61, 0x76, 0x3f, 0x54, 0xa1, 0x28, 0x2e, 0xd1,
	0xb9, 0xe9, 0xb1, 0x3a, 0xf7, 0x21, 0x98, 0x25, 0xdf, 0x3a, 0x86, 0x4b, 0xea, 0x47, 0x46, 0x87,
	0x88, 0xe2, 0xbd, 0x36, 0x5e, 0xfa, 0x98, 0x45, 0xe5, 0x36, 0x0b, 0x69, 0x2f, 0xa4, 0x40, 0x51,
	0x3e, 0x78, 0x08, 0x96, 0x75, 0xd3, 0x20, 0x96, 0x57, 0x25, 0xae, 0x67, 0x34, 0x0c, 0x1d, 0x7b,
	0xe4, 0x3e, 0xab, 0xd3, 0x34, 0x8f, 0xee, 0x7f, 0x22, 0xba, 0xe5, 0xea, 0x30, 0x10, 0x1a, 0x6e,
	0x0b, 0x77, 0xc0, 0x5c, 0x5f, 0xb1, 0x4f, 0xce, 0x39, 0xd9, 0x0c, 0x27, 0x5b, 0x16, 0x64, 0x73,
	0xd5, 0xa8, 0x12, 0xc5, 0xb1, 0xb1, 0x5b, 0x7b, 0x6b, 0xfc, 0x5b, 0x9b, 0x1b, 0x7d, 0x6b, 0x95,
	0xbf, 0x32, 0xfd, 0x55, 0x92, 0xec, 0x63, 0xa8, 0x81, 0x3c, 0x3e, 0xc3, 0x86, 0x89, 0x6b, 0x26,
	0xe1, 0xf5, 0xc8, 0x55, 0x16, 0x04, 0x43, 0x7e, 0x37, 0x50, 0xa0, 0x10, 0x03, 0xb7, 0x41, 0xd6,
	0x3b, 0x77, 0x82, 0x8b, 0xfd, 0x4a, 0x30, 0x67, 0x47, 0xe7, 0x0e, 0xf9, 0xa7, 0x5b, 0x5e, 0x42,
	0xe4, 0x1b, 0x9f, 0x50, 0xaf, 0x6a, 0x5b, 0x75, 0xc3, 0x33, 0x6c, 0x8b, 0xc9, 0x11, 0xb7, 0x60,
	0xe7, 0x48, 0xa7, 0xbc, 0xee, 0xd3, 0xf1, 0x73, 0x54, 0x3d, 0x44, 0xac, 0xe6, 0x42, 0x0b, 0xd7,
	0x40, 0xb6, 0x85, 0x69, 0x4b, 0xa4, 0x4c, 0x4e, 0xf2, 0x47, 0x98, 0xb6, 0x10, 0xd7, 0xc0, 0x47,
	0xa0, 0x44, 0x2c, 0xdd, 0x3d, 0x77, 0x3c, 0x52, 0x1f, 0x5a, 0x16, 0x9e, 0xb6, 0x42, 0x45, 0xe9,
	0x75, 0xcb, 0xa5, 0xbd, 0x2b, 0x91, 0xe8, 0x05, 0x4c, 0x10, 0x81, 0x95, 0x04, 0x22, 0x28, 0x69,
	0x8e, 0xfb, 0x58, 0xed, 0x75, 0xcb, 0x2b, 0x7b, 0x43, 0x11, 0x68, 0x84, 0x25, 0x3c, 0x01, 0x79,
	0x13, 0x53, 0xaf, 0xda, 0x22, 0x7a, 0xbb, 0x98, 0xbf, 0x76, 0x3f, 0xcf, 0xb1, 0xe2, 0x1c, 0x04,
	0x04, 0x28, 0xe4, 0xe2, 0x4b, 0x5b, 0xee, 0x73, 0xfe, 0xdd, 0xf3, 0xd2, 0x2e, 0xed, 0x78, 0x98,
	0xff, 0xf9, 0xd2, 0x4e, 0xd0, 0xbf, 0x78, 0x69, 0xc7, 0x0d, 0x5e, 0xde, 0xa5, 0x1d, 0x8f, 0x73,
	0xc4, 0xd2, 0xfe, 0x7b, 0xe0, 0x41, 0x7c, 0x69, 0x6f, 0x83, 0x82, 0xbc, 0xf0, 0xe1, 0xd6, 0x96,
	0x5f, 0x22, 0x27, 0x11, 0x1d, 0x8a, 0x21, 0xd9, 0xba, 0xaf, 0x13, 0xaa, 0xbb, 0x86, 0xc3, 0x86,
	0x5a, 0x2c, 0x6e, 0xb9, 0xee, 0xef, 0x87, 0x2a, 0x14, 0xc5, 0xc1, 0x2a, 0x58, 0x08, 0x69, 0x6c,
	0x93, 0xf0, 0xaf, 0xdf, 0x0c, 0xff, 0xf6, 0x58, 0xee, 0x75, 0xcb, 0x0b, 0x27, 0x49, 0x25, 0x1a,
	0xc4, 0xc3, 0xf5, 0xfe, 0x3a, 0xe4, 0xb6, 0x59, 0x6e, 0x5b, 0x08, 0x56, 0x21, 0x37, 0x91, 0x5a,
	0x65, 0x05, 0x2c, 0x0d, 0xab, 0xbb, 0xf2, 0x73, 0x1a, 0xcc, 0xc5, 0x5c, 0xdd, 0xc0, 0x54, 0x9c,
	0xc6, 0xa6, 0x62, 0xfb, 0xba, 0xd5, 0x65, 0x51, 0x8e, 0x1c, 0x8a, 0x5a, 0x62, 0x28, 0xde, 0x9b,
	0x88, 0xfd, 0xea, 0x99, 0xf8, 0x2d, 0x05, 0xe2, 0xe5, 0xb9, 0x81, 0x91, 0xf8, 0x22, 0x3e, 0x12,
	0xf7, 0x26, 0x79, 0xd6, 0x88, 0x89, 0xf8, 0x25, 0xf9, 0x1c, 0x3e, 0x10, 0xe1, 0xdf, 0x66, 0xb2,
	0x3b, 0xd3, 0x03, 0x7f, 0x9b, 0xc9, 0xde, 0x4c, 0x62, 0x93, 0x53, 0x91, 0x19, 0x73, 0x2a, 0xd6,
	0x41, 0xce, 0x0d, 0xdc, 0x45, 0x1a, 0x5a, 0xfa, 0x91, 0x5a, 0xe5, 0x1d, 0xb0, 0x38, 0xa4, 0x66,
	0xf2, 0x42, 0xa6, 0x47, 0x5d, 0xc8, 0xca, 0xfe, 0xc5, 0x65, 0x69, 0xea, 0xd9, 0x65, 0x69, 0xea,
	0xf9, 0x65, 0x69, 0xea, 0xfb, 0x5e, 0x29, 0x75, 0xd1, 0x2b, 0xa5, 0x9e, 0xf5, 0x4a, 0xa9, 0xe7,
	0xbd, 0x52, 0xea, 0x8f, 0x5e, 0x29, 0xf5, 0xe3, 0x9f, 0xa5, 0xa9, 0xd3, 0xbb, 0x63, 0xfd, 0x57,
	0xd6, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x75, 0xee, 0x33, 0xe2, 0xf2, 0x12, 0x00, 0x00,
}

func (m *KubeUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KubeUserList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeUserList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeUserList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KubeUserSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeUserSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeUserSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterViewRefs) > 0 {
		for iNdEx := len(m.ClusterViewRefs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClusterViewRefs[iNdEx])
			copy(dAtA[i:], m.ClusterViewRefs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterViewRefs[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ClusterAdminRefs) > 0 {
		for iNdEx := len(m.ClusterAdminRefs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClusterAdminRefs[iNdEx])
			copy(dAtA[i:], m.ClusterAdminRefs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterAdminRefs[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	i -= len(m.Nickname)
	copy(dAtA[i:], m.Nickname)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Nickname)))
	i--
	dAtA[i] = 0x3a
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Groups[iNdEx])
			copy(dAtA[i:], m.Groups[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Groups[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	i -= len(m.Phone)
	copy(dAtA[i:], m.Phone)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phone)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Language)
	copy(dAtA[i:], m.Language)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Language)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Email)
	copy(dAtA[i:], m.Email)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Email)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Username)
	copy(dAtA[i:], m.Username)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Username)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KubeUserStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeUserStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeUserStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespaces) > 0 {
		for iNdEx := len(m.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Namespaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Workspaces) > 0 {
		for iNdEx := len(m.Workspaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Workspaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UserClusterNamespace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserClusterNamespace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserClusterNamespace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.AllNamespace {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	if len(m.Namespaces) > 0 {
		for iNdEx := len(m.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Namespaces[iNdEx])
			copy(dAtA[i:], m.Namespaces[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Namespaces[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.ClusterRef)
	copy(dAtA[i:], m.ClusterRef)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterRef)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UserClusterWorkspace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserClusterWorkspace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserClusterWorkspace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Workspaces) > 0 {
		for iNdEx := len(m.Workspaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Workspaces[iNdEx])
			copy(dAtA[i:], m.Workspaces[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Workspaces[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.ClusterRef)
	copy(dAtA[i:], m.ClusterRef)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterRef)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UserKubeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserKubeConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserKubeConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UserKubeConfigList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserKubeConfigList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserKubeConfigList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UserKubeConfigSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserKubeConfigSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserKubeConfigSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Email)
	copy(dAtA[i:], m.Email)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Email)))
	i--
	dAtA[i] = 0x42
	i -= len(m.Username)
	copy(dAtA[i:], m.Username)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Username)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.ClientKeyData)
	copy(dAtA[i:], m.ClientKeyData)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClientKeyData)))
	i--
	dAtA[i] = 0x32
	i -= len(m.ClientCertificateData)
	copy(dAtA[i:], m.ClientCertificateData)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClientCertificateData)))
	i--
	dAtA[i] = 0x2a
	if m.ExpiredTime != nil {
		{
			size, err := m.ExpiredTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i -= len(m.ClusterRef)
	copy(dAtA[i:], m.ClusterRef)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterRef)))
	i--
	dAtA[i] = 0x12
	i -= len(m.KubeUserRef)
	copy(dAtA[i:], m.KubeUserRef)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubeUserRef)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UserKubeConfigStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserKubeConfigStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserKubeConfigStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastCheck != nil {
		{
			size, err := m.LastCheck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.EncryptedClientKeyData != nil {
		i -= len(m.EncryptedClientKeyData)
		copy(dAtA[i:], m.EncryptedClientKeyData)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.EncryptedClientKeyData)))
		i--
		dAtA[i] = 0x42
	}
	if m.EncryptedClientCertificateData != nil {
		i -= len(m.EncryptedClientCertificateData)
		copy(dAtA[i:], m.EncryptedClientCertificateData)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.EncryptedClientCertificateData)))
		i--
		dAtA[i] = 0x3a
	}
	i -= len(m.Hash)
	copy(dAtA[i:], m.Hash)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Hash)))
	i--
	dAtA[i] = 0x32
	i -= len(m.CSRRef)
	copy(dAtA[i:], m.CSRRef)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CSRRef)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x1a
	i--
	if m.Available {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}

func (m *WorkspaceGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkspaceGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkspaceGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WorkspaceGroupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkspaceGroupList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkspaceGroupList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WorkspaceGroupSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkspaceGroupSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkspaceGroupSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserRefs) > 0 {
		for iNdEx := len(m.UserRefs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserRefs[iNdEx])
			copy(dAtA[i:], m.UserRefs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.UserRefs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.WorkspaceRoleRefs) > 0 {
		for iNdEx := len(m.WorkspaceRoleRefs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WorkspaceRoleRefs[iNdEx])
			copy(dAtA[i:], m.WorkspaceRoleRefs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.WorkspaceRoleRefs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.Description)
	copy(dAtA[i:], m.Description)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Description)))
	i--
	dAtA[i] = 0x12
	i -= len(m.WorkspaceRef)
	copy(dAtA[i:], m.WorkspaceRef)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.WorkspaceRef)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WorkspaceGroupStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkspaceGroupStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkspaceGroupStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *WorkspaceRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkspaceRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkspaceRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WorkspaceRoleList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkspaceRoleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkspaceRoleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WorkspaceRoleSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkspaceRoleSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkspaceRoleSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleRefs) > 0 {
		for iNdEx := len(m.RoleRefs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RoleRefs[iNdEx])
			copy(dAtA[i:], m.RoleRefs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.RoleRefs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.Description)
	copy(dAtA[i:], m.Description)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Description)))
	i--
	dAtA[i] = 0x1a
	if len(m.ClusterRoleRefs) > 0 {
		for iNdEx := len(m.ClusterRoleRefs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClusterRoleRefs[iNdEx])
			copy(dAtA[i:], m.ClusterRoleRefs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterRoleRefs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorkspaceRoleStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkspaceRoleStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkspaceRoleStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Hash)
	copy(dAtA[i:], m.Hash)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Hash)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KubeUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubeUserList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *KubeUserSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Email)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Language)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Phone)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Groups) > 0 {
		for _, s := range m.Groups {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.Nickname)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.ClusterAdminRefs) > 0 {
		for _, s := range m.ClusterAdminRefs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.ClusterViewRefs) > 0 {
		for _, s := range m.ClusterViewRefs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *KubeUserStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Workspaces) > 0 {
		for _, e := range m.Workspaces {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Namespaces) > 0 {
		for _, e := range m.Namespaces {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *UserClusterNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterRef)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Namespaces) > 0 {
		for _, s := range m.Namespaces {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 2
	return n
}

func (m *UserClusterWorkspace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterRef)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Workspaces) > 0 {
		for _, s := range m.Workspaces {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *UserKubeConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *UserKubeConfigList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *UserKubeConfigSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KubeUserRef)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClusterRef)
	n += 1 + l + sovGenerated(uint64(l))
	if m.ExpiredTime != nil {
		l = m.ExpiredTime.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.ClientCertificateData)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClientKeyData)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Username)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Email)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *UserKubeConfigStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CSRRef)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Hash)
	n += 1 + l + sovGenerated(uint64(l))
	if m.EncryptedClientCertificateData != nil {
		l = len(m.EncryptedClientCertificateData)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.EncryptedClientKeyData != nil {
		l = len(m.EncryptedClientKeyData)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LastCheck != nil {
		l = m.LastCheck.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *WorkspaceGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *WorkspaceGroupList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *WorkspaceGroupSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WorkspaceRef)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Description)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.WorkspaceRoleRefs) > 0 {
		for _, s := range m.WorkspaceRoleRefs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.UserRefs) > 0 {
		for _, s := range m.UserRefs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *WorkspaceGroupStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *WorkspaceRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *WorkspaceRoleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *WorkspaceRoleSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClusterRoleRefs) > 0 {
		for _, s := range m.ClusterRoleRefs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.Description)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.RoleRefs) > 0 {
		for _, s := range m.RoleRefs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *WorkspaceRoleStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *KubeUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeUser{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "KubeUserSpec", "KubeUserSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "KubeUserStatus", "KubeUserStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeUserList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]KubeUser{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "KubeUser", "KubeUser", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&KubeUserList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeUserSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubeUserSpec{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Language:` + fmt.Sprintf("%v", this.Language) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Groups:` + fmt.Sprintf("%v", this.Groups) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`ClusterAdminRefs:` + fmt.Sprintf("%v", this.ClusterAdminRefs) + `,`,
		`ClusterViewRefs:` + fmt.Sprintf("%v", this.ClusterViewRefs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubeUserStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForWorkspaces := "[]UserClusterWorkspace{"
	for _, f := range this.Workspaces {
		repeatedStringForWorkspaces += strings.Replace(strings.Replace(f.String(), "UserClusterWorkspace", "UserClusterWorkspace", 1), `&`, ``, 1) + ","
	}
	repeatedStringForWorkspaces += "}"
	repeatedStringForNamespaces := "[]UserClusterNamespace{"
	for _, f := range this.Namespaces {
		repeatedStringForNamespaces += strings.Replace(strings.Replace(f.String(), "UserClusterNamespace", "UserClusterNamespace", 1), `&`, ``, 1) + ","
	}
	repeatedStringForNamespaces += "}"
	s := strings.Join([]string{`&KubeUserStatus{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Workspaces:` + repeatedStringForWorkspaces + `,`,
		`Namespaces:` + repeatedStringForNamespaces + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserClusterNamespace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserClusterNamespace{`,
		`ClusterRef:` + fmt.Sprintf("%v", this.ClusterRef) + `,`,
		`Namespaces:` + fmt.Sprintf("%v", this.Namespaces) + `,`,
		`AllNamespace:` + fmt.Sprintf("%v", this.AllNamespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserClusterWorkspace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserClusterWorkspace{`,
		`ClusterRef:` + fmt.Sprintf("%v", this.ClusterRef) + `,`,
		`Workspaces:` + fmt.Sprintf("%v", this.Workspaces) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserKubeConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserKubeConfig{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "UserKubeConfigSpec", "UserKubeConfigSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "UserKubeConfigStatus", "UserKubeConfigStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserKubeConfigList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]UserKubeConfig{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "UserKubeConfig", "UserKubeConfig", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&UserKubeConfigList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserKubeConfigSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserKubeConfigSpec{`,
		`KubeUserRef:` + fmt.Sprintf("%v", this.KubeUserRef) + `,`,
		`ClusterRef:` + fmt.Sprintf("%v", this.ClusterRef) + `,`,
		`ExpiredTime:` + strings.Replace(fmt.Sprintf("%v", this.ExpiredTime), "Time", "v1.Time", 1) + `,`,
		`ClientCertificateData:` + fmt.Sprintf("%v", this.ClientCertificateData) + `,`,
		`ClientKeyData:` + fmt.Sprintf("%v", this.ClientKeyData) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserKubeConfigStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserKubeConfigStatus{`,
		`Available:` + fmt.Sprintf("%v", this.Available) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`CSRRef:` + fmt.Sprintf("%v", this.CSRRef) + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`EncryptedClientCertificateData:` + valueToStringGenerated(this.EncryptedClientCertificateData) + `,`,
		`EncryptedClientKeyData:` + valueToStringGenerated(this.EncryptedClientKeyData) + `,`,
		`LastCheck:` + strings.Replace(fmt.Sprintf("%v", this.LastCheck), "Time", "v1.Time", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkspaceGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkspaceGroup{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "WorkspaceGroupSpec", "WorkspaceGroupSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "WorkspaceGroupStatus", "WorkspaceGroupStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkspaceGroupList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]WorkspaceGroup{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "WorkspaceGroup", "WorkspaceGroup", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&WorkspaceGroupList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkspaceGroupSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkspaceGroupSpec{`,
		`WorkspaceRef:` + fmt.Sprintf("%v", this.WorkspaceRef) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`WorkspaceRoleRefs:` + fmt.Sprintf("%v", this.WorkspaceRoleRefs) + `,`,
		`UserRefs:` + fmt.Sprintf("%v", this.UserRefs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkspaceGroupStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkspaceGroupStatus{`,
		`}`,
	}, "")
	return s
}
func (this *WorkspaceRole) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkspaceRole{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "WorkspaceRoleSpec", "WorkspaceRoleSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "WorkspaceRoleStatus", "WorkspaceRoleStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkspaceRoleList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]WorkspaceRole{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "WorkspaceRole", "WorkspaceRole", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&WorkspaceRoleList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkspaceRoleSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkspaceRoleSpec{`,
		`ClusterRoleRefs:` + fmt.Sprintf("%v", this.ClusterRoleRefs) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`RoleRefs:` + fmt.Sprintf("%v", this.RoleRefs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkspaceRoleStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkspaceRoleStatus{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *KubeUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeUserList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeUserList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeUserList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, KubeUser{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeUserSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeUserSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeUserSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterAdminRefs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterAdminRefs = append(m.ClusterAdminRefs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterViewRefs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterViewRefs = append(m.ClusterViewRefs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeUserStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeUserStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeUserStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspaces = append(m.Workspaces, UserClusterWorkspace{})
			if err := m.Workspaces[len(m.Workspaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, UserClusterNamespace{})
			if err := m.Namespaces[len(m.Namespaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserClusterNamespace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserClusterNamespace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserClusterNamespace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterRef = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllNamespace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllNamespace = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserClusterWorkspace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserClusterWorkspace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserClusterWorkspace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterRef = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspaces = append(m.Workspaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserKubeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserKubeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserKubeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserKubeConfigList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserKubeConfigList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserKubeConfigList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, UserKubeConfig{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserKubeConfigSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserKubeConfigSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserKubeConfigSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeUserRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeUserRef = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterRef = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiredTime == nil {
				m.ExpiredTime = &v1.Time{}
			}
			if err := m.ExpiredTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCertificateData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCertificateData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientKeyData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientKeyData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserKubeConfigStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserKubeConfigStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserKubeConfigStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Available = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = RequestConditionType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CSRRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CSRRef = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedClientCertificateData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedClientCertificateData = append(m.EncryptedClientCertificateData[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedClientCertificateData == nil {
				m.EncryptedClientCertificateData = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedClientKeyData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedClientKeyData = append(m.EncryptedClientKeyData[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedClientKeyData == nil {
				m.EncryptedClientKeyData = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCheck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastCheck == nil {
				m.LastCheck = &v1.Time{}
			}
			if err := m.LastCheck.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkspaceGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkspaceGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkspaceGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkspaceGroupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkspaceGroupList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkspaceGroupList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, WorkspaceGroup{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkspaceGroupSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkspaceGroupSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkspaceGroupSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceRef", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkspaceRef = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceRoleRefs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkspaceRoleRefs = append(m.WorkspaceRoleRefs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRefs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserRefs = append(m.UserRefs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkspaceGroupStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkspaceGroupStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkspaceGroupStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkspaceRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkspaceRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkspaceRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkspaceRoleList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkspaceRoleList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkspaceRoleList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, WorkspaceRole{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkspaceRoleSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkspaceRoleSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkspaceRoleSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterRoleRefs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterRoleRefs = append(m.ClusterRoleRefs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleRefs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleRefs = append(m.RoleRefs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkspaceRoleStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkspaceRoleStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkspaceRoleStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
