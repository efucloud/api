/*
Copyright 2022 The efucloud.com Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.efucloud.api.rbac.v1alpha1;

import "k8s.io/api/rbac/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/efucloud/api/rbac/v1alpha1";

// KubeUser luffy user and name's suffix is eauth account id
message KubeUser {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional KubeUserSpec spec = 2;

  optional KubeUserStatus status = 3;
}

message KubeUserCertificateSigningRequest {
  // cluster name
  optional string clusterRef = 1;

  // kubeUser config
  optional string kubeUserConfigRef = 2;

  // request status
  // +kubebuilder:validation:Enum=Approved;Denied;Failed;Waiting;Created;Received
  optional string status = 3;

  // faield reason
  // +optional
  optional string reason = 4;
}

// KubeUserList contains a list of KubeUser
message KubeUserList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated KubeUser items = 2;
}

message KubeUserSpec {
  // username
  // +kubebuilder:validation:Required
  optional string username = 1;

  // user email
  // +optional
  optional string email = 2;

  // default language
  // +kubebuilder:validation:Enum=zh;en
  // +optional
  optional string language = 3;

  // user's mobile phone
  // +optional
  optional string phone = 4;

  // +optional
  repeated string groups = 6;

  // +optional
  optional string nickname = 7;

  // user has cluster role: efu-cloud-cluster-admin
  // +optional
  repeated string clusterAdminRefs = 8;

  // user has cluster role: efu-cloud-cluster-view
  // +optional
  repeated string clusterViewRefs = 9;
}

message KubeUserStatus {
  // status
  // +kubebuilder:validation:Enum=Enable;Disable
  // +kubebuilder:default:=Enable
  // +optional
  optional string status = 1;

  // reason
  // +optional
  optional string reason = 2;

  // which workspace can access
  // +optional
  repeated UserClusterWorkspace workspaces = 3;

  // which namespace can access
  // +optional
  repeated UserClusterNamespace namespaces = 4;

  // Certificate request errors
  // +optional
  repeated KubeUserCertificateSigningRequest certificateErrors = 5;
}

message UserClusterNamespace {
  // cluster name
  optional string clusterRef = 1;

  // namespaces
  // +optional
  repeated string namespaces = 2;

  // all namespace
  // +optional
  optional bool allNamespace = 3;
}

message UserClusterWorkspace {
  // cluster name
  optional string clusterRef = 1;

  // workspaces
  repeated string workspaces = 2;
}

// UserKubeConfig is the Schema for the usermanages API
message UserKubeConfig {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional UserKubeConfigSpec spec = 2;

  optional UserKubeConfigStatus status = 3;
}

// UserKubeConfigList contains a list of UserKubeConfig
message UserKubeConfigList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated UserKubeConfig items = 2;
}

// UserKubeConfigSpec defines the desired state of UserKubeConfig
message UserKubeConfigSpec {
  // ref kubeuser
  // +kubebuilder:validation:Required
  optional string kubeUserRef = 1;

  // cluster resource name
  // +kubebuilder:validation:Required
  optional string clusterRef = 2;

  // expire time
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time expiredTime = 3;

  // user ClientCertificateData if content is raw data will auto base64 encode
  // is csr.Status.Certificate
  optional string clientCertificateData = 5;

  // user ClientKeyData if content is raw data will auto base64 encode
  // csr private key
  optional string clientKeyData = 6;

  // username
  // +optional
  optional string username = 7;

  // email
  // +optional
  optional string email = 8;
}

// UserKubeConfigStatus defines the observed state of UserKubeConfig
message UserKubeConfigStatus {
  // if false app will not use this kubeconfig although available is true
  // +optional
  // +kubebuilder:default:=true
  optional bool enable = 1;

  // if true, app can use kubeconfig connect with cluster
  // +optional
  // +kubebuilder:default:=true
  optional bool available = 2;

  // Only one condition of a given type is allowed.
  optional string type = 3;

  // ref  cluster's CertificateSigningRequest
  // +optional
  optional string csrRef = 5;

  // +optional
  optional string hash = 6;

  // user ClientCertificateData if content is raw data will auto base64 encode
  // +optional
  optional bytes encryptedClientCertificateData = 7;

  // user ClientKeyData if content is raw data will auto base64 encode
  // +optional
  optional bytes encryptedClientKeyData = 8;

  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastCheck = 9;
}

// WorkspaceGroup workspace group
message WorkspaceGroup {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional WorkspaceGroupSpec spec = 2;

  optional WorkspaceGroupStatus status = 3;
}

// WorkspaceGroupList contains a list of WorkspaceGroup
message WorkspaceGroupList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated WorkspaceGroup items = 2;
}

message WorkspaceGroupSpec {
  // workspace ref
  optional string workspaceRef = 1;

  // Description  about workspace role
  // +kubebuilder:validation:Required
  optional string description = 2;

  // workspace role refs
  // +optional
  repeated string workspaceRoleRefs = 3;
}

message WorkspaceGroupStatus {
}

// WorkspaceRole workspace role
message WorkspaceRole {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional WorkspaceRoleSpec spec = 2;

  optional WorkspaceRoleStatus status = 3;
}

// WorkspaceRoleList contains a list of WorkspaceRole
message WorkspaceRoleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated WorkspaceRole items = 2;
}

message WorkspaceRoleSpec {
  // +optional
  repeated k8s.io.api.rbac.v1.PolicyRule rules = 1;

  // ref cluster roles, it must have label: efucloud.com/custom`
  // +optional
  repeated string clusterRoleRefs = 2;

  // Description  about workspace role
  // +kubebuilder:validation:Required
  optional string description = 3;

  // only ref pod's namespace role,  it must have label: efucloud.com/custom
  // +optional
  repeated string roleRefs = 4;

  // workspace space role scope: Cluster,Workspace,if scope is cluster RoleRefs will be ignored
  // +kubebuilder:validation:Required
  // +kubebuilder:default:=Workspace
  // +kubebuilder:validation:Enum:=Cluster;Workspace
  optional string scope = 5;
}

message WorkspaceRoleStatus {
  // rules
  // +optional
  repeated k8s.io.api.rbac.v1.PolicyRule rules = 3;

  // status rule and scope hash, not include description, if hash changed will auto sync to cluster
  // +optional
  optional string hash = 2;
}

